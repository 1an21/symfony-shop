<?php
//Link: https://davidwalsh.name/gmail-php-imap
//Link: https://www.codediesel.com/php/downloading-gmail-attachments-in-php-an-update/
/*

*/
/* connect to gmail */
$hostname = '{imap.gmail.com:993/imap/ssl}INBOX';
$username = 'brworkers.co.il@gmail.com';
$password = 'NEWbrworkers';

$user_id = get_user_meta( get_current_user_id(), 'worker_number', true );//"0542233159";//get user id from user //
$path = "./wp-content/uploads/attachments/$user_id/";
/* try to connect */
$inbox = imap_open($hostname,$username,$password) or die('Cannot connect to Gmail: ' . imap_last_error());

/* grab emails */
$emails = imap_search($inbox,'UNSEEN FROM "brworkers.co.il'.$user_id.'@gmail.com"');//UNSEEN//ALL

/* if emails are returned, cycle through each... */
if($emails) {

	/* begin output var */
	// $output = '';

	/* put the newest emails on top */
	rsort($emails);

    /* for every email... */
    $max_emails = 16;
	foreach($emails as  $index=>$email_number) {
        if($index > $max_emails) break;

		/* get information specific to this email */
		$overview = imap_fetch_overview($inbox,$email_number,0);

        /* get mail message, not actually used here.
           Refer to http://php.net/manual/en/function.imap-fetchbody.php
           for details on the third parameter.
         */
        // $message = imap_fetchbody($inbox,$email_number,2);


        // var_dump($overview);
		// if($overview[0]->seen){}
        /* output the email header information */
        $email_date = (new DateTime($overview[0]->date))->format('Y-m');
        //The previous month
        $newdate = new DateTime($email_date.'-01');
        $newdate->modify('-1 month');
        $email_date = $newdate->format('Y-m');

        $email = $overview[0]->to;
        if (strpos($email, '+') !== false){
            // $user_id = explode('@', $email);
            // $user_id = explode('+', $user_id[0]);
            // $user_id = $user_id[1];

            // $output.= '<div>';
            // $output.= '<div class="subject">'.$overview[0]->subject.'</div> ';
            // $output.= '<div class="to">'.$email.'</div>';
            // $output.= '<div class="user-id">'.$user_id.'</div>';

            // $output.= '<div class="date">'.$email_date.'</div>';
            // $output.= '</div>';

            // /* output the email body */
            // // $output.= '<div class="body">'.$message.'</div>';





            /* get mail structure */
            $structure = imap_fetchstructure($inbox, $email_number);

            $attachments = array();

            /* if any attachments found... */
            if(isset($structure->parts) && count($structure->parts))
            {
                for($i = 0; $i < count($structure->parts); $i++)
                {
                    $attachments[$i] = array(
                        'is_attachment' => false,
                        'filename' => '',
                        'name' => '',
                        'attachment' => ''
                    );
                    // if this attachment has idfparameters, then proceed
                    if($structure->parts[$i]->ifdparameters)
                    {
                        foreach($structure->parts[$i]->dparameters as $object)
                        {
                            if(strtolower($object->attribute) == 'filename')
                            {
                                $attachments[$i]['is_attachment'] = true;
                                $attachments[$i]['filename'] = $object->value;
                            }
                        }
                    }
                    // if this attachment has ifparameters, then proceed as above
                    if($structure->parts[$i]->ifparameters)
                    {
                        foreach($structure->parts[$i]->parameters as $object)
                        {
                            if(strtolower($object->attribute) == 'name')
                            {
                                $attachments[$i]['is_attachment'] = true;
                                $attachments[$i]['name'] = $object->value;
                            }
                        }
                    }
                    // if we found a valid attachment for this 'part' of the email, process the attachment
                    if($attachments[$i]['is_attachment'])
                    {
                        // get the content of the attachment
                        $attachments[$i]['attachment'] = imap_fetchbody($inbox, $email_number, $i+1);

                        // check if this is base64 encoding
                        if($structure->parts[$i]->encoding == 3) /* 3 = BASE64 encoding */
                        {
                            $attachments[$i]['attachment'] = base64_decode($attachments[$i]['attachment']);
                        }
                        // otherwise, check if this is "quoted-printable" format
                        elseif($structure->parts[$i]->encoding == 4) /* 4 = QUOTED-PRINTABLE encoding */
                        {
                            $attachments[$i]['attachment'] = quoted_printable_decode($attachments[$i]['attachment']);
                        }
                    }
                }
            }
            // var_dump($attachments);


            /* iterate through each attachment and save it */
            foreach($attachments as $attachment)
            {
                if($attachment['is_attachment'] == 1)
                {
                    $filename = $attachment['name'];
                    if(empty($filename)) $filename = $attachment['filename'];

                    if(empty($filename)) $filename = time() . ".dat";

                    // check if the file is a pdf
                    if(strpos($filename, 'pdf') !== false){

                        //check if directory exist else create directory
                        // $path = "../../wp-content/uploads/attachments/$user_id/";
                        if(!file_exists($path)){
                            mkdir($path);
                        }

                        /* prefix the email number to the filename in case two emails
                        * have the attachment with the same file name.
                        */
                        $filename = $email_date.'('.$email_number.').pdf';


                        $fp = fopen($path . $filename, "w+");
                        fwrite($fp, $attachment['attachment']);
                        fclose($fp);
                    }

                }

            }




        }
	}

	// echo $output;
}

/* close the connection */
imap_close($inbox);

//check if directory exist else create directory
// $user_id = "0542233159";//get user id from user
// $path = "../../wp-content/uploads/attachments/$user_id/";
if(!file_exists($path)){
    mkdir($path);
}
// get all file in directory
$files = array_diff(scandir($path), array('.', '..'));

//the NEW if first
rsort($files);//$files = array_reverse($files, true);

$max_files_show = 12;
foreach($files as $index=>$file) {
    if($index > $max_files_show) break;

    $file_name= explode('(', $file)[0];
    $full_path = "http://" . $_SERVER['SERVER_NAME'] . substr($path,1);
    echo  '<div class="paycheck-item">תלוש עבור חודש: <strong>'.$file_name.'</strong><a href ="javascript:void(0)" onclick="pdfDownload(this);" download="'.$file_name.'('.date('YmdHis').').pdf"  class="btn btn-primary btn-sm" d-loc="'.base64_encode($full_path.$file).'" >הורדה <span class="fa fa-download"></span></a></div>';
}
// var_dump($files);
?>
<script>
function pdfDownload(e){e.setAttribute("href",window.atob(e.getAttribute("d-loc"))),setTimeout(function(){e.setAttribute("href","javascript:void(0)")},1e3)}
</script>